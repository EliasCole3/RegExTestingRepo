\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b
"[A-Z0-9._%+-]" - a series of letters, digits, dots, underscores, percentage signs and hyphens
"+" - followed by
"@" - an at sign
"[A-Z0-9.-]" - followed by another series of letters, digits and hyphens
"+\.[A-Z]{2,4}" - finally followed by a single dot and between two and four letters.


(?=.*foo)(?=.*baz)
"This says that foo must appear anywhere and bar must appear anywhere, not necessarily in that order and possibly overlapping (although overlapping is not possible in this specific case)."


As you probably know, there are four kinds of lookarounds:
✽ (?= (Lookahead)
✽ (?! (Negative Lookahead)
✽ (?<= (Lookbehind)
✽ (?<! (Negative Lookbehind)


Lookahead: bubble(?=gum)
Translation: "bubble" immediately followed by "gum". Matches "bubble" in "bubblegum". No capture.

In this example, the lookahead came after the string to be matched. Notice a second way of using a lookaround, where the lookaround precedes the string to be matched:

Lookahead: (?=\d{10}\s)451
Translation: Match "451" if it is part of a string of ten digits. This regex will not match in "451 cats on an island", but it will match "451" in "4512367890 seconds". 

Negative lookahead: bubble(?!gum)
Translation: "bubble" not followed by "gum". Matches "bubble" in "bubble bath".

Lookbehind: (?<=gum)boot
Translation: "boot" preceded by "gum". Matches "boot" in "gumboot". Looks confusingly similar to the atomic group syntax.

Negative lookbehind: (?<!gum)boot
Translation: "boot" not preceded by "gum". Matches "boot" in "carboot".


digit - "\d is short for [0-9]"
word - "\w is equivalent to [a-zA-Z_0-9]"
whitespace character - "\s, it includes [ \t\r\n\f]"
The above three shorthands also have negated versions. \D is the same as [^\d], \W is short for [^\w] and \S is the equivalent of [^\s].
almost any character(not line breaks) = "."



literal - cat, dog, etc
special characters(12) - " \ ^ $ . | ? * + ( ) [ { "

The backslash in combination with a literal character can create a regex token with a special meaning. E.g. \d is a shorthand that matches a single digit from 0 to 9.

Escaping a single metacharacter with a backslash works in all regular expression flavors. Many flavors also support the \Q…\E escape sequence. All the characters between the \Q and the \E are interpreted as literal characters. E.g. \Q*\d+*\E matches the literal text *\d+*.\

With a "character class", also called "character set", you can tell the regex engine to match only one out of several characters. Simply place the characters you want to match between square brackets. If you want to match an a or an e, use [ae]. You could use this in gr[ae]y to match either gray or grey.

Typing a caret after the opening square bracket negates the character class. The result is that the character class matches any character that is not in the character class.  [^0-9\r\n] matches any character that is not a digit or a line break.

Both [-x] and [x-] match an x or a hyphen. 
[^-x] and [^x-] match any character thas is not an x or a hyphen.

Character class subtraction makes it easy to match any single character present in one list (the character class), but not present in another list (the subtracted class). The syntax for this is [class-[subtract]].
The character class [a-z-[aeiuo]] matches a single letter that is not a vowel.

Since you can use the full character class syntax within the subtracted character class, you can subtract a class from the class being subtracted. [0-9-[0-6-[0-3]]] first subtracts 0-3 from 0-6, yielding [0-9-[4-6]], or [0-37-9], which matches any character in the string 0123789.

[^\d\s]   matches any character that is neither a digit nor whitespace. It matches x, but not 8. 
[\D\S]     matches any character that is either not a digit, or is not whitespace. Because all digits are not whitespace, and all whitespace characters are not digits, [\D\S] matches any character; digit, whitespace, or otherwise.  You can activate single-line mode by adding an s after the regex code, like this: m/^regex$/s;.

In Perl, the mode where the dot also matches line breaks is called "single-line mode". Other languages and regex libraries have adopted Perl's terminology. When using the regex classes of the .NET framework, you activate this mode by specifying RegexOptions.Singleline, such as in Regex.Match("string", "regex", RegexOptions.Singleline).

 The caret ^ matches the position before the first character in the string.
 Similarly, $ matches right after the last character in the string.

 If you have a string consisting of multiple lines, like first line\nsecond line (where \n indicates a line break), it is often desirable to work with lines, rather than the entire string.
 In .NET, the anchors match before and after newlines when you specify RegexOptions.Multiline, such as in Regex.Match("string", "regex", RegexOptions.Multiline).
 
\A only ever matches at the start of the string. Likewise, \Z only ever matches at the end of the string. These two tokens never match at line breaks. This is true in all regex flavors discussed in this tutorial, even when you turn on "multiline mode".

Let's see what happens when we try to match ^4$ to 749\n486\n4 (where \n represents a newline character) in multi-line mode.
only the last 4 matches


































